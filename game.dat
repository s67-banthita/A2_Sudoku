int[][] boardGame = new int[9][9];
boolean[][] cantEdit = new boolean[9][9];
boolean isEasyMode = false;
boolean isGameStarted = false;
int selectedRow = -1;
int selectedCol = -1;
int wrongAttempts = 0;


void setup() {
  size(450, 550);
  resetBoard(); 
  drawStartButton();
}


void draw() {
  if (isGameStarted) {
    background(255);
    drawGrid();
    drawNumbers();
    drawButtons();
    
    if (isBoardFull() && isSolutionCorrect()) {
      background(255, 182, 193);
      fill(250, 27, 140);
      textSize(45);
      text("You Win!", 130, 250);
      
      textSize(20);
      text("Wrong Attempts: " + wrongAttempts, 130, 300);
      
      noLoop(); 
    }
  }
}


void drawButtons() {
  fill(173, 216, 230);
  rect(100, 460, 100, 40); // Easy
  fill(0);
  textSize(20);
  text("Easy", 130, 490);

  fill(255, 160, 122);
  rect(250, 460, 100, 40); // Difficult
  fill(0);
  textSize(20);
  text("Difficult", 270, 490);
  
  
  fill(144, 238, 144); 
  rect(50, 510, 100, 40);
  fill(0);
  textSize(20);
  text("Save", 85, 540); //Save
  
  fill(240, 230, 140); 
  rect(300, 510, 100, 40);
  fill(0);
  textSize(20);
  text("Load", 335, 540); // Load
}


void drawStartButton() {
  background(255, 209, 220);
  textAlign(CENTER);
  
  // Start button
  fill(195, 177, 225);
  strokeWeight(5);
  rect(130, 125, 190, 65);
  fill(0);
  textSize(30);
  text("Start Game", width / 2, 165);
  
  // Instructure
  textSize(20);
  text("Fill a 9x9 grid so that each row, column\n and 3x3 box contains number 1-9 without repeats.", width / 2, 270);
  textSize(40);
  text("Click to Start !", width /2 , 430);
  
  textAlign(LEFT); // to reset
}


void drawGrid() {
  stroke(0);
    
  for (int i = 0; i < 10; i++) {
    strokeWeight(i % 3 == 0 ? 4 : 1); 
    line(i * 50, 0, i * 50, 450); 
    line(0, i * 50, 450, i * 50); 
  }
  if (selectedRow >= 0 && selectedCol >= 0) {
    stroke(255, 182, 193); 
    strokeWeight(2);
    noFill();
    rect(selectedCol * 50, selectedRow * 50, 50, 50); 
  }
}


boolean fillCompleteBoard() {
  return fillBoard(0, 0);
}


boolean fillBoard(int row, int col) {
  if (row == 9) return true; 
  if (col == 9) return fillBoard(row + 1, 0); 

  if (boardGame[row][col] != 0) return fillBoard(row, col + 1);

  Integer[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};
  numbers = shuffleArray(numbers); 

  for (int num : numbers) {
    if (isSafe(row, col, num)) {
      boardGame[row][col] = num; 
      if (fillBoard(row, col + 1)) return true;

      boardGame[row][col] = 0; 
    }
  }
  return false; 
}


boolean isSafe(int row, int col, int num) {
  for (int j = 0; j < 9; j++) {
    if (boardGame[row][j] == num) return false; 
  }
  for (int i = 0; i < 9; i++) {
    if (boardGame[i][col] == num) return false; 
  }


  int startRow = row - row % 3;
  int startCol = col - col % 3;
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      if (boardGame[i + startRow][j + startCol] == num) return false; 
    }
  }
  return true; 
}


void drawNumbers() {
  textSize(33);
  
  
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (boardGame[i][j] != 0) {
   
        
        fill(cantEdit[i][j] ? color(0) : color(0, 128, 0)); 
        text(boardGame[i][j], j * 50 + 15, i * 50 + 35); 
      }
    }
  }
}


void mousePressed() {
  int col = mouseX / 50;
  int row = mouseY / 50;
  
  
  if (isGameStarted) {
    if (row >= 0 && row < 9 && col >= 0 && col < 9) {
      selectedCol = col;
      selectedRow = row;
    }
  
    if (mouseX > 100 && mouseX < 200 && mouseY > 460 && mouseY < 500) {
      isEasyMode = true;
      resetBoard(); 
    } else if (mouseX > 250 && mouseX < 350 && mouseY > 460 && mouseY < 500) {
      isEasyMode = false;
      resetBoard(); 
    }
    
    // Detects clicks on the save button
    if (mouseX > 50 && mouseX < 150 && mouseY > 510 && mouseY < 550) {
      saveGame();
    }
  
    // Detects clicks on the load button
    if (mouseX > 300 && mouseX < 400 && mouseY > 510 && mouseY < 550) {
      loadGame();
    }
  }
  
  // Detects clicks on the start button
  if (mouseX > 130 && mouseX < 320 && mouseY > 125 && mouseY < 185 && isGameStarted == false) {
    isGameStarted = true;
  }
}


void resetBoard() {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      boardGame[i][j] = 0;
      cantEdit[i][j] = false; // Reset cantEdit for all cells
    }
  }
  fillCompleteBoard(); 
  
  
  if (isEasyMode) {
    removeNumbers((int) random(10, 13)); 
  } else {
    removeNumbers(63); 
  }

  // Mark the remaining numbers as uneditable
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (boardGame[i][j] != 0) {
        cantEdit[i][j] = true;
      }
    }
  }
}


void removeNumbers(int count) {
  int removed = 0;
  while (removed < count) {
    int row = (int) random(9);
    int col = (int) random(9);
    if (boardGame[row][col] != 0) {
      cantEdit[row][col] = false; 
      boardGame[row][col] = 0; 
      removed++;
    }
  }
}


void keyPressed() {
  if (selectedRow >= 0 && selectedRow < 9 && selectedCol >= 0 && selectedCol < 9) {
    if (!cantEdit[selectedRow][selectedCol]) { 
      if (key >= '1' && key <= '9') {
        int num = Character.getNumericValue(key); 
        if (isSafe(selectedRow, selectedCol, num)) {
          boardGame[selectedRow][selectedCol] = num; 
        } else {
          println("Invalid number in this block!");
          wrongAttempts++; 
        }
      } else if (key == BACKSPACE) {
        boardGame[selectedRow][selectedCol] = 0; 
        cantEdit[selectedRow][selectedCol] = false; 
      }
    } else {
      println("This block cannot be edited!");
    }
  }
}


// Help function to shuffle an array
Integer[] shuffleArray(Integer[] array) {
  for (int i = array.length - 1; i > 0; i--) {
    int j = (int) random(i + 1);
    int temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
  return array;
}


boolean isBoardFull() {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (boardGame[i][j] == 0) {
        return false; // if some block is 0 = still not full
      }
    }
  }
  return true; // fill all
}


// This function check numbers that it is correct all or not
boolean isSolutionCorrect() {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      int num = boardGame[i][j];
      boardGame[i][j] = 0; 
      if (!isSafe(i, j, num)) {
        boardGame[i][j] = num; 
        return false; 
      }
      boardGame[i][j] = num; 
    }
  }
  return true; // All numbers is correct
} 


void saveGame() {
  PrintWriter output = createWriter("saved_game.txt");
  
  // Save the board
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      output.print(boardGame[i][j] + " ");
    }
    output.println(); 
  }

  // Save cantEdit array
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      output.print(cantEdit[i][j] ? "1 " : "0 ");
    }
    output.println();
  }

  // Save additional information
  output.println(isEasyMode ? "1" : "0"); // Save isEasyMode
  output.println(wrongAttempts);          // Save wrongAttempts

  output.flush();
  output.close();
  println("Game saved!");
}


void loadGame() {
  String[] lines = loadStrings("saved_game.txt");
  if (lines == null) {
    println("No saved game found.");
    return;
  }

  // Load the board
  for (int i = 0; i < 9; i++) {
    String[] nums = split(lines[i], ' ');
    for (int j = 0; j < 9; j++) {
      boardGame[i][j] = int(nums[j]);
    }
  }

  // Load cantEdit array
  for (int i = 0; i < 9; i++) {
    String[] edits = split(lines[i + 9], ' ');
    for (int j = 0; j < 9; j++) {
      cantEdit[i][j] = edits[j].equals("1");
    }
  }

  // Load additional information
  isEasyMode = lines[18].equals("1"); // Load isEasyMode
  wrongAttempts = int(lines[19]);     // Load wrongAttempts

  redraw(); // Update the game display
  println("Game loaded!");
}
