int [][] boardGame = new int [9][9];
boolean [][] cantEdit = new boolean [9][9];
int selectedRow = -1; 
int selectedCol = -1; 


void setup() {
  size(450, 500);
  background(255);
  fillRandomNumbers();
}


void draw() {
  background(255);
  drawGrid();
  drawNumbers();
}


void drawGrid() {
  stroke(0);
  for (int i = 0; i < 10; i++) {
    strokeWeight(i % 3 == 0 ? 4 : 1);  // i % 3 = 0 is big line

    line(i * 50, 0, i * 50, 450); // draw line Vertical
    line(0, i * 50, 450, i * 50); // draw line Horizon
  }
    if (selectedRow >= 0 && selectedCol >= 0) {
    stroke(255, 182, 193); // cute pink
    strokeWeight(2);
    noFill();
    rect(selectedCol * 50, selectedRow * 50, 50, 50); // draw frame
  }
}


void fillRandomNumbers() {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (random(1) > 0.7) { // about 30% will fill numbers
        int num = (int)random(1, 10); 
        if (correctPosition(num, i, j)) {
          boardGame[i][j] = num; // fill numbers if is correct
          cantEdit[i][j] = false;
        }else{
        cantEdit[i][j] = true;
        }
      }
    }
  }
}



void drawNumbers() {
  textSize(33);
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (boardGame[i][j] != 0) {
        fill(0); 
        text(boardGame[i][j], j * 50 + 15, i * 50 + 35); 
      }
    }
  }
}


boolean correctPosition(int num, int row, int col) {
  for (int j = 0; j < 9; j++) {
    if (boardGame[row][j] == num) { // check row
      return false;
    }
  }
  
  
  for (int i = 0; i < 9; i++) {
    if (boardGame[i][col] == num) { // check column
      return false;
    }
  }
  
  
  int startRow = row - row % 3;
  int startCol = col - col % 3;
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      if (boardGame[i + startRow][j + startCol] == num) { // check block 3 * 3
        return false; 
      }
    }
  }
  
  return true; // can fill numbers
}


void mousePressed() {
  
  selectedCol = mouseX / 50;
  selectedRow = mouseY / 50;
}


void keyPressed() {
  if (selectedRow >= 0 && selectedRow < 9 && selectedCol >= 0 && selectedCol < 9) {
    if (cantEdit[selectedRow][selectedCol]) { //check if the cell is editable
      if (key >= '1' && key <= '9') {
        int num = Character.getNumericValue(key); 
        if (correctPosition(num, selectedRow, selectedCol)) {
          boardGame[selectedRow][selectedCol] = num; 
        }
      }
    }
  }
}
